# -*- coding: utf-8 -*-
"""TREND_FORECASTING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YdGVaiYFtIZoWcgWfbjbidvxPiFrQUOt
"""

!pip install dash dash-bootstrap-components pandas matplotlib statsmodels plotly
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller
from google.colab import files
import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
import plotly.graph_objs as go

# Upload the CSV file
uploaded = files.upload()

# Check the name of the uploaded file
filename = list(uploaded.keys())[0]
print(f"Uploaded file: {filename}")

# Load the CSV file into a pandas DataFrame
df = pd.read_csv(filename)

# Define Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define app layout
app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H1("Sales Trend Forecasting Dashboard"), className="mb-2")
    ]),
    dbc.Row([
        dbc.Col([
            dcc.Input(id='product-name', type='text', placeholder='Enter product name'),
            html.Button(id='submit-button', n_clicks=0, children='Submit'),
        ])
    ]),
    dbc.Row([
        dbc.Col(html.Div(id='kpi-output'), width=12)
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='historical-sales-chart'), width=6),
        dbc.Col(dcc.Graph(id='forecast-sales-chart'), width=6)
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='sales-pie-chart'))
    ])
])

# Define callback for updating dashboard components
@app.callback(
    [Output('kpi-output', 'children'),
     Output('historical-sales-chart', 'figure'),
     Output('forecast-sales-chart', 'figure'),
     Output('sales-pie-chart', 'figure')],
    [Input('submit-button', 'n_clicks')],
    [dash.dependencies.State('product-name', 'value')]
)
def update_dashboard(n_clicks, product_name):
    if not product_name:
        return html.Div("Enter a product name to see KPIs"), {}, {}, {}

    # Filter data for the specified product
    df_product = df[df['Item Purchased'] == product_name]

    # Check if data is available for the product
    if df_product.empty:
        return html.Div(f"No data found for product: {product_name}"), {}, {}, {}

    # Perform ADF test to check stationarity
    result = adfuller(df_product['Purchase Amount (USD)'])
    d = 0 if result[1] < 0.05 else 1  # Determine differencing order

    # Define ARIMA parameters
    p, q = 1, 1  # Example parameters, adjust as needed

    try:
        # Fit ARIMA model
        model = ARIMA(df_product['Purchase Amount (USD)'], order=(p, d, q))
        model_fit = model.fit()

        # Forecast sales for next 12 months
        forecast_steps = 12
        forecast = model_fit.forecast(steps=forecast_steps)

        # Prepare historical sales chart
        historical_sales_fig = {
            'data': [
                {'x': df_product.index, 'y': df_product['Purchase Amount (USD)'], 'type': 'line', 'name': 'Historical Sales'}
            ],
            'layout': {'title': f'Historical Sales for {product_name}'}
        }

        # Prepare forecast sales chart
        forecast_dates = pd.date_range(start=df_product.index[-1], periods=forecast_steps + 1, freq='M')[1:]
        forecast_sales_fig = {
            'data': [
                {'x': df_product.index, 'y': df_product['Purchase Amount (USD)'], 'type': 'line', 'name': 'Historical Sales'},
                {'x': forecast_dates, 'y': forecast, 'type': 'line', 'name': 'Forecasted Sales'}
            ],
            'layout': {'title': f'Forecasted Sales for {product_name}'}
        }

        # Calculate KPIs
        total_sales = df_product['Purchase Amount (USD)'].sum()
        average_sales = df_product['Purchase Amount (USD)'].mean()
        forecast_sales_sum = forecast.sum()

        kpi_output = html.Div([
            html.H4(f"Total Sales: ${total_sales:.2f}"),
            html.H4(f"Average Sales: ${average_sales:.2f}"),
            html.H4(f"Forecasted Sales (Next 12 Months): ${forecast_sales_sum:.2f}")
        ])

        # Prepare pie chart data
        pie_chart_data = {
            'data': [
                go.Pie(labels=['Historical Sales', 'Forecasted Sales'],
                       values=[total_sales, forecast_sales_sum],
                       hole=0.5,
                       hoverinfo="label+percent",
                       textinfo="value",
                       marker={'colors': ['#007bff', '#28a745']}
                      )
            ],
            'layout': {'title': f'Sales Distribution for {product_name}'}
        }

        return kpi_output, historical_sales_fig, forecast_sales_fig, pie_chart_data

    except Exception as e:
        return html.Div(f"Error: {str(e)}"), {}, {}, {}

# Run Dash app
if __name__ == '__main__':
    app.run_server(debug=True)